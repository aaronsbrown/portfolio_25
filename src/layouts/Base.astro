---
export interface Props {
  title: string;
  description?: string;
}

const { title, description = "Aaron Steele Brown - Creative Technologist" } = Astro.props;
---

<!doctype html>
<html lang="en" class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
    
    <!-- Preload fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <!-- Using Space Grotesk as Pangram Fraktion alternative - update with actual Pangram Fraktion when available -->
    <link href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&family=Space+Mono:wght@400;700&display=swap" rel="stylesheet" />
    
    <!-- TODO: Replace with Pangram Fraktion when font files are available -->
    <!-- <link rel="stylesheet" href="/fonts/pangram-fraktion.css" /> -->
    <style is:global>
      @import "../styles/global.css";
    </style>
  </head>
  <body class="bg-neutral-50 dark:bg-neutral-900 text-neutral-900 dark:text-neutral-100 transition-colors duration-300 ease-in-out font-grotesk antialiased">
    <slot />
    
    <!-- CRT grain overlay -->
    <div class="crt-overlay"></div>
    
    <script>
      // Theme toggle functionality
      const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
          return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
          return 'dark';
        }
        return 'light';
      })();

      if (theme === 'light') {
        document.documentElement.classList.remove('dark');
      } else {
        document.documentElement.classList.add('dark');
      }

      window.localStorage.setItem('theme', theme);
    </script>
    
    <style>
      /* Tech-Brutalist CRT Overlay System */
      .crt-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        pointer-events: none;
        opacity: 0.04;
        z-index: 9999;
        background-image: 
          radial-gradient(circle, transparent 1px, rgba(100, 100, 100, 0.08) 1px),
          linear-gradient(90deg, transparent 49%, rgba(120, 120, 120, 0.03) 50%, transparent 51%);
        background-size: 3px 3px, 2px 2px;
        animation: grain 12s steps(8) infinite;
      }
      
      @keyframes grain {
        0%, 100% { transform: translate(0, 0) }
        12.5% { transform: translate(-2%, -8%) }
        25% { transform: translate(-8%, 3%) }
        37.5% { transform: translate(5%, -12%) }
        50% { transform: translate(-3%, 15%) }
        62.5% { transform: translate(-8%, 8%) }
        75% { transform: translate(8%, 0%) }
        87.5% { transform: translate(0%, 12%) }
      }
      
      .dark .crt-overlay {
        background-image: 
          radial-gradient(circle, transparent 1px, rgba(200, 200, 200, 0.06) 1px),
          linear-gradient(90deg, transparent 49%, rgba(180, 180, 180, 0.02) 50%, transparent 51%);
      }

      /* Tech-Brutalist scan lines */
      .crt-overlay::after {
        content: '';
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background: linear-gradient(
          transparent 48%, 
          rgba(120, 120, 120, 0.01) 49%, 
          rgba(120, 120, 120, 0.02) 50%, 
          rgba(120, 120, 120, 0.01) 51%, 
          transparent 52%
        );
        background-size: 100% 4px;
        animation: scanlines 0.2s linear infinite;
      }

      @keyframes scanlines {
        0% { transform: translateY(0px); }
        100% { transform: translateY(4px); }
      }
    </style>
  </body>
</html>